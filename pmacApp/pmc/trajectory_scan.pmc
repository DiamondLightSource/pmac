#include "./trajectory_scan_definitions.pmc"

; *****************************************************************************************
; Set-Up
; *****************************************************************************************

Del Gat

; Set Initial Values
BufferLength = BuffLen                          ; BuffLen defined in header file
BufferAdr_A = $BufferAdr                        ; BufferAdr defined in header file
BufferAdr_B = BufferAdr_A + 10*BufferLength
Status = 0
Abort = 0
Error = 0

; Make sure all buffers are closed
Close

; *****************************************************************************************
; Program
; *****************************************************************************************

Open Program ProgramNum
Clear

Abs
FRAX(A,B,C,U,V,W,X,Y,Z)

Status = 1                          ; Reset values to defaults
Abort = 0
Error = 0
CurrentIndex = 0
TotalPoints = 0

CurrentBufferAdr = BufferAdr_A      ; Set CurrentBuffer values to buffer A
CurrentBufferFill = BufferFill_A
CurrentBuffer = 0

PrevBufferFill = BufferLength       ; Set PrevBufferFill to pass outer while loop condition

GoSub101                            ; Check which axes are required
GoSub103                            ; Set addresses for required axes

While(Abort = 0 and Error = 0 and CurrentBufferFill > 0 and PrevBufferFill = BufferLength)

    CurrentIndex = 1
    ; This loop ends when Current_* is at N-1 because then Next_* is at N
    While(Abort = 0 and Error = 0 and CurrentIndex < CurrentBufferFill)

        GoSub102                            ; Shift values through Next_* -> Current_* -> Prev_*
        GoSub104                            ; Calculate velocities
        GoSub109                            ; Move axes
        CurrentIndex = CurrentIndex + 1

    End While

    GoSub102                                ; Shift previous/current coordinates to N-1th/Nth points in buffer

    ; Toggle buffer - Change address & specifier, set new buffer fill, reset previous buffer fill
    PrevBufferFill = CurrentBufferFill      ; Update previous buffer fill - will exit while loop if it wasn't full
    If(Abort = 0 and CurrentBufferFill = BufferLength)
        If(CurrentBuffer = 0)
            CurrentBufferAdr = BufferAdr_B
            CurrentBuffer = 1
            CurrentBufferFill = BufferFill_B
            BufferFill_A = 0
        Else
            CurrentBufferAdr = BufferAdr_A
            CurrentBuffer = 0
            CurrentBufferFill = BufferFill_A
            BufferFill_B = 0
        End If
        ; Move to final point of buffer if next buffer has points
        If(Abort = 0 and CurrentBufferFill > 0)     ; Do move with previous buffer N-1 and N and current buffer 1

            CurrentIndex = 0                    ; Reset to start of next buffer
            GoSub103                            ; Update Next_* addresses to 0th point of next buffer
            GoSub104                            ; Calculate velocities
            GoSub109                            ; Move axes to final point of previous buffer
        Else
            ; Move to final point if the scan wasn't aborted
            If(Abort = 0)
                GoSub108                ; Set velocity through final point to zero
                GoSub109                ; Move axes
            End If
        End If
    Else
        If(Status = 1)
            ; Move to final point if the scan wasn't aborted
            If(Abort = 0)
                GoSub108                ; Set velocity through final point to zero
                GoSub109                ; Move axes
            End If
        End If
    End If
End While

Dwell 0                         ; Stop program aborting before above lines are complete
; Set Idle Status if no error occurred
If(Status = 1)
    Status = 2                  ; Set program finished (Idle status)
End If
Dwell 200                       ; Ensure the driver receives an updated status before killing the program
Return

; Subroutine 1 ************************************************************************************
; Check that axes value is valid and activate required axes. The *_Axis values point to the bits of
; AxesParser and therefore represent axis activation
; *************************************************************************************************
N101
    If(Axes > 511)
        Status = 3
        Error = 1
    Else
        AxesParser = Axes   ; Set bit parsed address to set required axes
    End If
Return

; Subroutine 2 ************************************************************************************
; Shift coordinate buffer through; Current -> Prev and then Next -> Current
; *************************************************************************************************

N102
    Time = Next_Time
    User = Next_User
    VelMode = NextVelMode
    CalculatedBase = CurrentBufferAdr + CurrentIndex
    Time_Adr = CalculatedBase
    User_Adr = CalculatedBase
    VelMode_Adr = CalculatedBase


    If(A_Axis = 1)
        Prev_A = Current_A
        Current_A = Next_A
    End If
    A_Adr = CalculatedBase + BufferLength
    If(B_Axis = 1)
        Prev_B = Current_B
        Current_B = Next_B
    End If
    B_Adr = A_Adr + BufferLength
    If (C_Axis = 1)
        Prev_C = Current_C
        Current_C = Next_C
    End If
    C_Adr = B_Adr + BufferLength
    If (U_Axis = 1)
        Prev_U = Current_U
        Current_U = Next_U
    End If
    U_Adr = C_Adr + BufferLength
    If (V_Axis = 1)
        Prev_V = Current_V
        Current_V = Next_V
    End If
    V_Adr = U_Adr + BufferLength
    If (W_Axis = 1)
        Prev_W = Current_W
        Current_W = Next_W
    End If
    W_Adr = V_Adr + BufferLength
    If (X_Axis = 1)
        Prev_X = Current_X
        Current_X = Next_X
    End If
    X_Adr = W_Adr + BufferLength
    If (Y_Axis = 1)
        Prev_Y = Current_Y
        Current_Y = Next_Y
    End If
    Y_Adr = X_Adr + BufferLength
    If (Z_Axis = 1)
        Prev_Z = Current_Z
        Current_Z = Next_Z
    End If
    Z_Adr = Y_Adr + BufferLength
Return

; Subroutine 3 ************************************************************************************
; Assign coordinate pointers based on CurrentBufferAdr (The start address of Buffer A/B),
; BufferLength (length of the sub-buffers) and CurrentIndex (position of Next_* pointer within the
; sub-buffers). If the axis is not activated (see Subroutine 1), it won't be incremented and will
; remain pointing to the BlankAdr
; *************************************************************************************************

N103
    CalculatedBase = CurrentBufferAdr + CurrentIndex
    Time_Adr = CalculatedBase
    User_Adr = CalculatedBase
    VelMode_Adr = CalculatedBase
    A_Adr = CalculatedBase + BufferLength
    B_Adr = A_Adr + BufferLength
    C_Adr = B_Adr + BufferLength
    U_Adr = C_Adr + BufferLength
    V_Adr = U_Adr + BufferLength
    W_Adr = V_Adr + BufferLength
    X_Adr = W_Adr + BufferLength
    Y_Adr = X_Adr + BufferLength
    Z_Adr = Y_Adr + BufferLength
Return

; Subroutines 4-8 *********************************************************************************
; Calculate velocities for next move - 4: Master, 5: Prev->Current, 6: Prev->Next, 7: Current->Next
; 8: Zero velocity for final move
; Velocities are multiplied by 1000000 because the units of Time are microseconds and the units
; of velocity are EGUs/second in the PVT move definition
; *************************************************************************************************

N104
    If(Time = 0)                        ; Set error and abort if demanded move time is zero
        Status = 3
        Error = 2
        CMD"A"
        Dwell 0
        Time = 1000
    End If

    ; Select velocity calculation based on VelMode value
    If(VelMode = 1)
        GoSub105                        ; Prev -> Current
    EndIf
    If(VelMode = 0)
        GoSub106                        ; Prev -> Next
    EndIf
    If(VelMode = 2)
        GoSub107                        ; Current -> Next
    EndIf
    If(VelMode = 3)
        GoSub108			; Zero
    EndIf	
Return

N105
    TmpTime = 1000000/Time
    A_Vel = A_Axis*TmpTime*(Current_A - Prev_A)
    B_Vel = B_Axis*TmpTime*(Current_B - Prev_B)
    C_Vel = C_Axis*TmpTime*(Current_C - Prev_C)
    U_Vel = U_Axis*TmpTime*(Current_U - Prev_U)
    V_Vel = V_Axis*TmpTime*(Current_V - Prev_V)
    W_Vel = W_Axis*TmpTime*(Current_W - Prev_W)
    X_Vel = X_Axis*TmpTime*(Current_X - Prev_X)
    Y_Vel = Y_Axis*TmpTime*(Current_Y - Prev_Y)
    Z_Vel = Z_Axis*TmpTime*(Current_Z - Prev_Z)
Return

N106
    TmpTime = 1000000/(Time + Next_Time) 
    A_Vel = A_Axis*TmpTime*(Next_A - Prev_A)
    B_Vel = B_Axis*TmpTime*(Next_B - Prev_B)
    C_Vel = C_Axis*TmpTime*(Next_C - Prev_C)
    U_Vel = U_Axis*TmpTime*(Next_U - Prev_U)
    V_Vel = V_Axis*TmpTime*(Next_V - Prev_V)
    W_Vel = W_Axis*TmpTime*(Next_W - Prev_W)
    X_Vel = X_Axis*TmpTime*(Next_X - Prev_X)
    Y_Vel = Y_Axis*TmpTime*(Next_Y - Prev_Y)
    Z_Vel = Z_Axis*TmpTime*(Next_Z - Prev_Z)
Return

N107
    TmpTime = 1000000/Next_Time 
    A_Vel = A_Axis*TmpTime*(Next_A - Current_A)
    B_Vel = B_Axis*TmpTime*(Next_B - Current_B)
    C_Vel = C_Axis*TmpTime*(Next_C - Current_C)
    U_Vel = U_Axis*TmpTime*(Next_U - Current_U)
    V_Vel = V_Axis*TmpTime*(Next_V - Current_V)
    W_Vel = W_Axis*TmpTime*(Next_W - Current_W)
    X_Vel = X_Axis*TmpTime*(Next_X - Current_X)
    Y_Vel = Y_Axis*TmpTime*(Next_Y - Current_Y)
    Z_Vel = Z_Axis*TmpTime*(Next_Z - Current_Z)
Return

N108
    A_Vel = 0
    B_Vel = 0
    C_Vel = 0
    U_Vel = 0
    V_Vel = 0
    W_Vel = 0
    X_Vel = 0
    Y_Vel = 0
    Z_Vel = 0
Return

; Subroutine 9 ************************************************************************************
; Move axes
; *************************************************************************************************

N109
    if (Axes > 0)
        PVT (Time * 0.001)                        ; Set move time
        $(MOVECMD=GoSub110)
    End If
    TotalPoints = TotalPoints + 1
    If(User > 0)
        GoSub(User)                     ; Run any required subroutine
    End If
Return

N110
    A(Current_A):(A_Vel) B(Current_B):(B_Vel) C(Current_C):(C_Vel) U(Current_U):(U_Vel) V(Current_V):(V_Vel) W(Current_W):(W_Vel) X(Current_X):(X_Vel) Y(Current_Y):(Y_Vel) Z(Current_Z):(Z_Vel)
Return

; User Subroutines ********************************************************************************
; Subroutines to be used via the user buffer
; First 8 are for GPIO 1-3 combinations of on and off
; *************************************************************************************************

N1
    M34 == 0 M33 == 0 M32 == 1
Return
N2
    M34 == 0 M33 == 1 M32 == 0
Return
N3
    M34 == 0 M33 == 1 M32 == 1
Return
N4
    M34 == 1 M33 == 0 M32 == 0
Return
N5
    M34 == 1 M33 == 0 M32 == 1
Return
N6
    M34 == 1 M33 == 1 M32 == 0
Return
N7
    M34 == 1 M33 == 1 M32 == 1
Return
N8
    M34 == 0 M33 == 0 M32 == 0
Return


Close


